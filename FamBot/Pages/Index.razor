@page "/"
@using FamBot.SignalR.Hubs;
@using Microsoft.AspNetCore.SignalR.Client
@using FamBot.Data.Services
@using Microsoft.AspNetCore.SignalR;

@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Debug Output</PageTitle>

<div class="chat-container">
    <div class="chat-me">

        <div class="list-group" id="messagesList">
            @foreach (var message in messages)
            {
                <div style="color: @message.Value" class="list-inline-item">@message.Key</div>
            }
        </div>

        <div class="user-input-container  d-flex flex-column">
            <button class="send-button btn btn-secondary my-3" @onclick="Send" disabled="@(!IsConnected)">Send</button>
            <input class="user-input" @bind="messageInput" />
            <input type="color" @bind="userColor" />
        </div>

    </div>
</div>


@code {
    private HubConnection? hubConnection;
    private Dictionary<string, string> messages = new();
    //private string? userInput;
    private string? messageInput;
    private string? userColor;
    ILogger? logger;
    private IHubContext<ChatHub, IChatClient> ChatHubContext { get; set; } = default!;
    public CalendarService CalService { get; private set; } = new();


    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("RecieveMessage", (userColor, messageInput) =>
        {
            var encodedMsg = $"{messageInput}";
            messages.Add(encodedMsg, userColor);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userColor, messageInput);
            messageInput = "";
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
<style>
    .chat-me {
        background-color: #77777711;
        max-width: 30em;
        min-width: 30em;
        max-height: 40em;
        min-height: 40em;
        padding: 1em;
        border-radius: 15px;
        color: @userColor;
        overflow-y: scroll;
        position: absolute;
    }

    .chat-you {
        background-color: #77777711;
        max-width: 30em;
        min-width: 30em;
        max-height: 40em;
        min-height: 40em;
        padding: 1em;
        border-radius: 15px;
        color: @userColor;
        overflow-y: scroll;
        position: absolute;
    }
</style>