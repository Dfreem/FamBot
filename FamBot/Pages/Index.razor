@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Debug Output</PageTitle>

<div class="chat-container d-flex flex-column">
    <div class="chat mt-auto">

        <div class="list-group" id="messagesList">
            @foreach (var message in messages)
            {
                <div class="list-inline-item">@message</div>
            }
        </div>
        <div class="user-input-container">
            <textarea class="user-input" @bind="messageInput"></textarea>
            <div class="button-wrapper d-flex p-2 my-2">
                <button class="send-button btn btn-secondary" @onclick="Send" disabled="@(!IsConnected)">Send</button>

            </div>

        </div>
    </div>
</div>


@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    //private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string>("ReceiveMessage", (message) =>
        {
            var encodedMsg = $"{message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}